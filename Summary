Commands:

docker images

docker ps

docker rmi <image> -f 

docker build --no-cache -t todo-backend ./backend

docker build --no-cache -t todo-frontend ./frontend

docker run -d \
  --name backend \
  -p 5000:5000 \
  --env MONGO_URL=mongodb://mongodb:27017/todo \
  todo-backend

docker run -d \
  --name frontend \
  -p 3000:80 \
  todo-frontend

docker run -d \
  --name mongodb \
  -p 27017:27017 \
  -v mongodb_data:/data/db \
  mongo:6

docker ps

docker stop mongodb
docker rm mongodb

#Errors
"For my backend code, server.js file did not reference routes/model properly in terms of file names, ip, etc. So I updated the code and rebuilt the dockerfile. Even though I stopped the container, deleted the image, rebuilt the image, then ran it, running docker logs showed that the references weren't updated.
Why? Because running docker build still used a cached (previous version) of the image. To do this, once the image is deleted, you need to rebuild the image with the --no-cache option:
    
    docker stop <current container>
    docker rmi <previous image>
    docker build --no-cache -t todo-backend backend/
    docker run -d \
      --name backend \
      -p 5000:5000 \
      --env MONGO_URL=mongodb://mongodb:27017/todo \
      todo-backend

When trying to run docker images, it says 'file name in use by x container'. You check and see there is no container with that name. run docker rm <container> and it will remove the container name, even if you dont see a container with that name.
Now you can run a docker container with a name you've used before. This is why, when you stop a docker container, it is best practice to remove it right after. i.e:
  docker stop mongodb
  docker rm mongodb


Docker container
Docker co
docker inspect network bridge
docker network ls
docker network connect bridge backend
docker network connect bridge mongodb
docker exec it backend sh ; ping mongodb